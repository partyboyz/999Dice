# Python code obfuscated by www.development-tools.net 
 

import base64, codecs
magic = 'aW1wb3J0IHJlcXVlc3RzLGpzb24sdGltZSxzeXMscmFuZG9tLG9zLGFyZ3BhcnNlCmltcG9ydCBjb2xvcmFtYQpmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBCYWNrLCBTdHlsZQpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZGludApmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQpjb2xvcmFtYS5pbml0KGF1dG9yZXNldD1UcnVlKQoKaGlqYXUgPSBTdHlsZS5CUklHSFQrRm9yZS5HUkVFTgpyZXMgPSBTdHlsZS5SRVNFVF9BTEwKYWJ1MiA9IFN0eWxlLkRJTStGb3JlLldISVRFCnVuZ3UgPSBTdHlsZS5CUklHSFQrRm9yZS5NQUdFTlRBCmhpamF1MiA9IFN0eWxlLkJSSUdIVCtGb3JlLkdSRUVOCnJlZDIgPSBTdHlsZS5CUklHSFQrRm9yZS5SRUQKcmVkID0gU3R5bGUuQlJJR0hUK0ZvcmUuUkVECmt1bmluZyA9IFN0eWxlLkJSSUdIVCtGb3JlLllFTExPVwpibHVlID0gU3R5bGUuQlJJR0hUK0ZvcmUuQkxVRQpoaXRhbSA9IFN0eWxlLk5PUk1BTCtGb3JlLkJMQUNLCnB1dGloID0gU3R5bGUuQlJJR0hUK0ZvcmUuV0hJVEUKYnJlZCA9IFN0eWxlLkJSSUdIVCtCYWNrLlJFRApiYmx1ZSA9IFN0eWxlLkJSSUdIVCtCYWNrLkJMVUUKYnB1dGloID0gU3R5bGUuQlJJR0hUK0JhY2suV0hJVEUKYyA9IHJlcXVlc3RzLnNlc3Npb24oKQpiYW5uZXIgPSByZWQyKyJcciAgICAgICAgICAgIFxu4paE4paA4paA4paEIOKWhOKWgOKWgOKWhCDiloTiloDiloDiloQg4paS4paI4paA4paA4paEIOKWkeKWgOKWkSDilojiloDiloAg4paI4paA4paAICAgICAgICAgICAgXG7iloDiloTiloTilogg4paA4paE4paE4paIIOKWgOKWhOKWhOKWiCDilpLilojilpHilpLilogg4paA4paI4paAIOKWiOKWkeKWkSDilojiloDiloAgICAgICAgICAgICBcbuKWkeKWhOKWhOKWgCDilpHiloTiloTiloAg4paR4paE4paE4paAIOKWkuKWiOKWhOKWhOKWgCDiloDiloDiloAg4paA4paA4paAIOKWgOKWgOKWgCIrcmVzCgpvcy5zeXN0ZW0oImNsZWFyIikKCmRlZiBwYXNzd29yZCgpOgogIHVybCA9ICdodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvUUpVNHhUZTknCiAgdXJsMSA9ICdodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvUlhlR0NxQjcnCiAgdXJsMiA9ICdodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvaUVTV2Q5UjMnCiAgcyA9IHJlcXVlc3RzLnNlc3Npb24oKQogIHJlcSA9IHMuZ2V0KHVybCkuanNvbigpCiAgcmVxMSA9IHMuZ2V0KHVybDEpLmpzb24oKQogIHJlcTIgPSBzLmdldCh1cmwyKS5qc29uKCkKICBwcmludChiYW5uZXIpCiAgcHJpbnQoa3VuaW5nKyJcbkRpcmVjdGVkIDogIitoaWphdSsiQWxmdGhyYSIrcmVzLGt1bmluZysiXG5TZXJ2ZXIgICA6ICIraGlqYXUrc3RyKHJlcTFbJ1NlcnZlciddKSxrdW5pbmcrIlxuUGFzc3dvcmQgIDogQW1iaWwgUGFzc3dvcmQgRGkgbGluayBiZXJpa3V0ICIrcmVzK2hpamF1K3N0cihyZXFbJ1Bhc3MnXSkrIlxuIikKICBjID0gcmVxdWVzdHMuU2Vzc2lvbigpCiAgaWYgbm90IG9zLnBhdGguZXhpc3RzKCIucGFzc3dvcmQiKToKICAgICAgb3MubWFrZWRpcnMoIi5wYXNzd29yZCIpCiAgcHcgPSByZXEyWydQYXNzJ10KICBpZiBub3Qgb3MucGF0aC5leGlzdHMoIi5wYXNzd29yZC9wYXNzd29yZC50eHQiKToKICAgICAgZiA9IG9wZW4oIi5wYXNzd29yZC9wYXNzd29yZC50eHQiLCAidysiKQogICAgICBmLndyaXRlKCI0MDRlcnJvciIpCiAgICAgIGYuY2xvc2UoKQogICAgICAKICBmb3IgaSBpbiByYW5nZSg5OSk6CiAgICAgIGYgPSBvcGVuKCIucGFzc3dvcmQvcGFzc3dvcmQudHh0IiwgInIiKQogICAgICBpZiBmLnJlYWRsaW5lcygpWzBdID09IHB3OgogICAgICAgICAgYnJlYWsKICAgICAgcHdpbiA9IGlucHV0KGt1bmluZysiRW50ZXIgUGFzc3dvcmQgOiAiK3JlcykKICAgICAgaWYgcHdpbiA9PSBwdzoKICAgICAgICAgIGYgPSBvcGVuKCIucGFzc3dvcmQvcGFzc3dvcmQudHh0IiwgIncrIikKICAgICAgICAgIGYud3JpdGUocHdpbikKICAgICAgICAgIGYuY2xvc2UoKQogICAgICAgICAgYnJlYWsKICAgICAgZWxzZToKICAgICAgICAgIHByaW50KHJlZCsiV3JvbmcgUGFzc3dvcmQuLi4hIikKICAgICAgICAgIGlmIGkgPiAxOgogICAgICAgICAgICAgIHByaW50KGt1bmluZysiXG5bSURdIENlayBLYXRhIFNhbmRpIFBhZGEgTGluayBCZXJpa3V0ICIraGlqYXUrcmVxWydQYXNzJ10pCiAgICAgICAgICAgICAgcHJpbnQoa3VuaW5nKyJcbltFTl0gQ2hlY2sgdGhlIFBhc3N3b3JkIE9uIFRoZSBGb2xsb3dpbmcgTGluayAiK2hpamF1K3JlcVsnUGFzcyddKQogICAgICAgICAgICAgIHN5cy5leGl0KCkKCgoKCgpwYXNzd29yZCgpCnVybCA9ICdodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvUlhlR0NxQjcnCnMgPSByZXF1ZXN0cy5zZXNzaW9uKCkKcmVxID0gcy5nZXQodXJsKS5qc29uKCkKaWYgcmVxWydFeHBpcmVkJ10gPT0gJ3lhJzoKICAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICAgcHJpbnQoYmFubmVyKQogICAgcHJpbnQoa3VuaW5nKyJcbkRpcmVjdGVkIDogIitoaWphdSsiQWxmdGhyYSIrcmVzLGt1bmluZysiXG5TZXJ2ZXIgICA6ICIraGlqYXUrc3RyKHJlcVsnU2VydmVyJ10pLGt1bmluZysiXG5NZXNzYWdlICA6ICIrcmVzK2hpamF1K3N0cihyZXFbJ1Blc2FuJ10pKyJcbiIpCiAgICBwcmludChoaWphdSsiU3Vrc2VzIFRlcmh1YnVuZyBkZW5nYW4gU2VydmVyISIpCiAgICB0aW1lLnNsZWVwKDUpCmVsc2U6CiAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgIHByaW50KGJhbm5lcikKICAgIHByaW50KGt1bmluZysiXG5EaXJlY3RlZCA6ICIraGlqYXUrIkFsZnRocmEiK3JlcyxrdW5pbmcrIlxuU2VydmVyICAgOiAiK2hpamF1K3N0cihyZXFbJ1NlcnZlciBPZmYnXSksa3VuaW5nKyJcbk1lc3NhZ2UgIDogIityZXMraGlqYXUrc3RyKHJlcVsnUGVzYW4gRXhwaXJlZCddKSsiXG4iKQogICAgdGltZS5zbGVlcCgyKQogICAgZXhpdCgpCgpkZWYgcnVuKHRla3MpOgogICAgcHV0aWggPSBTdHlsZS5CUklHSFQrRm9yZS5XSElURQogICAgbWVyYWggPSBTdHlsZS5CUklHSFQrRm9yZS5SRUQKICAgIHRla3MgPSB0ZWtzKyIgIgogICAgdHJ5OgogICAgICAgIG51bSA9IDAKICAgICAgICB3aGlsZSBudW0gPCAxOgogICAgICAgICAgICBmb3IgaSxjaGFyIGluIGVudW1lcmF0ZSh0ZWtzKToKICAgICAgICAgICAgICAgIGlmIGkgPT0gMDoKICAgICAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcciVzJXMlcyVzJyAlIChwdXRpaCxjaGFyLmxvd2VyKCksbWVyYWgsdGVrc1sxOl0pKSwKICAgICAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAxOgogICAgICAgICAgICAgICAgICAgICAgICB6YmwgPSB0ZWtzWzBdLmxvd2VyKCkKICAgICAgICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgnXHIlcyVzJXMlcyVzJXMnICUgKG1lcmFoLHpibCxwdXRpaCxjaGFyLmxvd2VyKCkscHV0aWgsdGVrc1syOl0pKSwKICAgICAgICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSBpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgemJsID0gdGVrc1swOmldLmxvd2VyKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoJ1xyJXMlcyVzJXMlcyVzJyAlIChtZXJhaCx6YmwscHV0aWgsY2hhci5sb3dlcigpLHB1dGloLHRla3NbaSsxOl0pKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4xKQogICAgICAgICAgICBudW0gKz0gMQogICAgZXhjZXB0OiBleGl0KCkKCgoKCgpvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCgoKCgp0aW1lLnNsZWVwKDIpCgpvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKcHJpbnQoYmFubmVyKQpwcmludChrdW5pbmcrIlxuRGlyZWN0ZWQgOiAiK2hpamF1KyJBbGZ0aHJhIityZXMsa3VuaW5nKyJcblNlcnZlciAgIDogIitoaWphdStzdHIocmVxWydTZXJ2ZXInXSksa3VuaW5nKyJcbk1lc3NhZ2UgIDogIityZXMraGlqYXUrc3RyKHJlcVsnUGVzYW4nXSkrIlxuIikKdGltZS5zbGVlcCgzKQpzeXMuc3Rkb3V0LndyaXRl'
love = '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'
god = 'ICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiIikKICAgICAgICBlbHNlOgogICAgICAgICAgIGlmIGFtb3VudCA+IGludChmbG9hdChvYmpbIkNvbmZpZyJdW3VydXRdWyJNYXggQmV0Il0pKigxMCAqKiA4KSk6CiAgICAgICAgICAgICAgIGFtb3VudCA9IHBheWluCiAgICAgICAgaWYgb2JqWyJDb25maWciXVt1cnV0XVsiQmV0Il1bIkggLyBMIl1bIlRvZ2dsZSJdID09ICJPbiIgb3Igb2JqWyJDb25maWciXVt1cnV0XVsiQmV0Il1bIkggLyBMIl1bIlRvZ2dsZSJdID09ICJPTiIgb3Igb2JqWyJDb25maWciXVt1cnV0XVsiQmV0Il1bIkggLyBMIl1bIlRvZ2dsZSJdID09ICJvbiI6CiAgICAgICAgICAgIG5vX3JvbGViZXQgKz0xCiAgICAgICAgICAgIGlmIHN0YXRzX3JvbGViZXRfd2luIGlzIFRydWU6CiAgICAgICAgICAgICAgIGlmIG5vX3JvbGViZXQgPiBpbnQob2JqWyJDb25maWciXVt1cnV0XVsiQmV0Il1bIkggLyBMIl1bIklmIFdpbiJdKSAtIDE6CiAgICAgICAgICAgICAgICAgIHJvbGViZXQgPSAiTCIKICAgICAgICAgICAgICAgaWYgbm9fcm9sZWJldCA+IGludChvYmpbIkNvbmZpZyJdW3VydXRdWyJCZXQiXVsiSCAvIEwiXVsiSWYgV2luIl0pICogMiAtIDE6CiAgICAgICAgICAgICAgICAgIHJvbGViZXQgPSAiSCIKICAgICAgICAgICAgICAgICAgbm9fcm9sZWJldCA9IDAKICAgICAgICAgICAgaWYgc3RhdHNfcm9sZWJldF9sb3NlIGlzIFRydWU6CiAgICAgICAgICAgICAgIGlmIG5vX3JvbGViZXQgPiBpbnQob2JqWyJDb25maWciXVt1cnV0XVsiQmV0Il1bIkggLyBMIl1bIklmIExvc2UiXSkgLTEgOgogICAgICAgICAgICAgICAgICByb2xlYmV0ID0gIkwiCiAgICAgICAgICAgICAgIGlmIG5vX3JvbGViZXQgPiBpbnQob2JqWyJDb25maWciXVt1cnV0XVsiQmV0Il1bIkggLyBMIl1bIklmIExvc2UiXSkgKiAyIC0gMToKICAgICAgICAgICAgICAgICAgcm9sZWJldCA9ICJIIgogICAgICAgICAgICAgICAgICBub19yb2xlYmV0ID0gMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJvbGViZXQgPSBvYmpbIkNvbmZpZyJdW3VydXRdWyJCZXQiXVsiQmV0Il0KICAgICAgICBpZiBteV9uYW1lc3BhY2UuYmV0c2V0ID09ICJBdXRvIiBvciBteV9uYW1lc3BhY2UuYmV0c2V0ID09ICJBVVRPIiBvciBteV9uYW1lc3BhY2UuYmV0c2V0ID09ICJhdXRvIjoKICAgICAgICAgIHdha3R1ID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoJyVNJykKICAgICAgICAgIGlmIGludCh3YWt0dSkgPiBpbnQobWVuaXQgLSAxKToKICAgICAgICAgICAgIG1lbml0ID0gaW50KG1lbml0KSArIGludChvYmpbIkludGVydmFsIl0pCiAgICAgICAgICAgICB1cnV0ICs9MQogICAgICAgICAgICAgaWYgdXJ1dCA9PSBqdW1sYWh1bGFuZzoKICAgICAgICAgICAgICAgIHVydXQgPSAwCiAgICAgICAgICAgICBwcmludCAoIkNoYW5nZSBCZXQgU2V0ICIrb2JqWyJDb25maWciXVt1cnV0XVsiTmFtZSBCZXQgU2V0Il0rIiAgICAgICAgICAgICAgICAgICAgICAgICAgICIpCiAgICAgICAgICAgICBzbHAgPSBpbnQob2JqWyJDb25maWciXVt1cnV0XVsiSW50ZXJ2YWwiXSkgLyAxMDAwCiAgICAgICAgICAgICBsaW1pdF9hID0gaW50KG9ialsiQ29uZmlnIl1bdXJ1dF1bIlJlc2V0IElmIFdpbiJdKSAtIDEKICAgICAgICAgICAgIHBheWluID0gaW50KGZsb2F0KG9ialsiQ29uZmlnIl1bdXJ1dF1bIkJhc2UgQmV0Il0pKigxMCAqKiA4KSkKICAgICAgICAgICAgIGFtb3VudCA9IHBheWluCgogICAgICAgIGVsc2U6CiAgICAgICAgICB1cnV0ID0gaW50KG15X25hbWVzcGFjZS5iZXRzZXQpCgogICAgICAgIGlmIG9ialsiQ29uZmlnIl1bdXJ1dF1bIlJhbmRvbSBDaGFuY2UiXVsiVG9nZ2xlIl0gPT0gIk9OIiBvciBvYmpbIkNvbmZpZyJdW3VydXRdWyJSYW5kb20gQ2hhbmNlIl1bIlRvZ2dsZSJdID09ICJPbiIgb3Igb2JqWyJDb25maWciXVt1cnV0XVsiUmFuZG9tIENoYW5jZSJdWyJUb2dnbGUiXSA9PSAib24iOgogICAgICAgICAgIGhhc2lsX2NoYW5jZSA9IHJvdW5kKHJhbmRvbS51bmlmb3JtKGZsb2F0KG9ialsiQ29uZmlnIl1bdXJ1dF1bIlJhbmRvbSBDaGFuY2UiXVsiTWluIl0pLGZsb2F0KG9ialsiQ29uZmlnIl1bdXJ1dF1bIlJhbmRvbSBDaGFuY2UiXVsiTWF4Il0pKSwyKQogICAgICAgICAgIGNvayA9IGxlbihzdHIoaGFzaWxfY2hhbmNlKSkKICAgICAgICAgICBpZiBjb2sgPT0gMzoKICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXHIiK2FidTIrc3RyKGhhc2lsX2NoYW5jZSkrcmVzKyIgICAiKQogICAgICAgICAgIGlmIGNvayA9PSA0OgogICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcciIrYWJ1MitzdHIoaGFzaWxfY2hhbmNlKStyZXMrIiAgIikKICAgICAgICAgICBpZiBjb2sgPT0gNToKICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXHIiK2FidTIrc3RyKGhhc2lsX2NoYW5jZSkrcmVzKyIgIikKICAgICAgICAgICBrb252ZXJ0KGhhc2lsX2NoYW5jZSxzdHIocm9sZWJldCkpCiAgICAgICAgZWxzZToKICAgICAgICAgICBrb252ZXJ0KG9ialsiQ29uZmlnIl1bdXJ1dF1bIkNoYW5jZSJdLHN0cihyb2xlYmV0KSkKCiAgICAgICAgdGltZS5zbGVlcChmbG9hdChzbHApKQogICAgICAgIGFtb3VudCA9IGludChhbW91bnQpCiAgICAgICAgbis9MQogICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAiYSI6ICJQbGFjZUJldCIsCiAgICAgICAgICAicyI6IGpzWyJTZXNzaW9uQ29va2llIl0sCiAgICAgICAgICAiUGF5SW4iOiBhbW91bnQsCiAgICAgICAgICAiTG93IjogbG93LAogICAgICAgICAgIkhpZ2giOiBoaWdoLAogICAgICAgICAgIkNsaWVudFNlZWQiOiByYW5kaW50KDAsOTk5OTk5KSwKICAgICAgICAgICJDdXJyZW5jeSI6ICJkb2dlIiwKICAgICAgICAgICJQcm90b2NvbFZlcnNpb24iOiAiMiIKICAgICAgICB9CiAgICAgICAgaWYgcHJvZiA+IGZsb2F0KG9ialsiVGFyZ2V0IFByb2ZpdCJdKToKICAgICAgICAgICBwcmludCAoaGlqYXUrIlxuWWF5LiEgXG5Qcm9maXQgTWVuY2FwYWkgVGFyZ2V0Li4uLi4hXG4iK2hpamF1KyJQcm9maXQgIityZXMrc3RyKHByb2YpKQogICAgICAgICAgIG9zLnN5c3RlbSgidGVybXV4LXRvYXN0IFlvdSB3aW4gIitzdHIocHJvZikpCiAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgIG9zLnN5c3RlbSgidGVybXV4LXRvYXN0IFRvdGFsIEJhbGFuY2UgIitzdHIoZmxvYXQoaW50KGpzblsiU3RhcnRpbmdCYWxhbmNlIl0pICsgaW50KGp1bSkpLygxMCAqKiA4KSkpCiAgICAgICAgICAgc3lzLmV4aXQoKQogICAgICAgIHIxID0gYy5wb3N0KHVybCxoZWFkZXJzPXVhLGRhdGE9ZGF0YSkKICAgICAgICBqc24gPSBqc29uLmxvYWRzKHIxLnRleHQpCiAgICAgICAgcHJvZiA9IChmbG9hdChqc25bIlN0YXJ0aW5nQmFsYW5jZSJdICsgaW50KGpzblsiUGF5T3V0Il0pIC0gaW50KGFtb3VudCkgLSBqdW1ibCkvKDEwICoqIDgpKQogICAgICAgIGp1bSA9IGludChqc25bIlBheU91dCJdKSAtIGludChhbW91bnQpCiAgICAgICAgaWYganNuWyJTdGFydGluZ0JhbGFuY2UiXSA+IHdzOgogICAgICAgICAgIHByaW50IChoaWphdSsiWyIrc3RyKHJvbGViZXQpKyJdICIrc3RyKGZsb2F0KGFtb3VudCkvKDEwICoqIDgpKStzdHIoZmxvYXQoaW50KGpzblsiU3RhcnRpbmdCYWxhbmNlIl0pICsgaW50KGp1bSkpLygxMCAqKiA4KSkrIlByb2ZpdCIsc3RyKHByb2YpKQogICAgICAgICAgIHByaW50ICgiWWF5LiFcbkJhbGFuY2UgU3VkYWggTWVtZW51aGkgVGFyZ2V0Li4uLi4hIikKICAgICAgICAgICBvcy5zeXN0ZW0oInRlcm11eC10b2FzdCBUYXJnZXQgV2luIFN1ZGFoIFRlcmNhcGFpIikKICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgICAgb3Muc3lzdGVtKCJ0ZXJtdXgtdG9hc3QgVG90YWwgQmFsYW5jZSAiK3N0cihmbG9hdChpbnQoanNuWyJTdGFydGluZ0JhbGFuY2UiXSkgKyBpbnQoanVtKSkvKDEwICoqIDgpKSkKICAgICAgICAgICBzeXMuZXhpdCgpCiAgICAgICAgaWYganNuWyJTdGFydGluZ0JhbGFuY2UiXSA8IGxzOgogICAgICAgICAgIHByaW50IChGb3JlLldISVRFK0JhY2suUkVEKyJbIisrc3RyKHJvbGViZXQpKyJdIityZWQrIi0iK3N0cihmbG9hdChhbW91bnQpLygxMCAqKiA4KSkrc3RyKChmbG9hdChpbnQoanNuWyJTdGFydGluZ0JhbGFuY2UiXSkgKyBpbnQoanVtKSkvKDEwICoqIDgpKSkrIkxvc2UgIixzdHIo'
destiny = 'pUWiMvxcPvNtVPNtVPNtVPNtpUWcoaDtXSA0rJkyYxWFFHqVIPgTo3WyYyWSEPfvGT9mMFOHLKWaMKDhYv4hVFVcPvNtVPNtVPNtVPNto3Zhp3ymqTIgXPW0MKWgqKtgqT9up3DtGT9mMFOHLKWaMKDtVvxXVPNtVPNtVPNtVPO0nJ1yYaAfMJIjXQRcPvNtVPNtVPNtVPNto3Zhp3ymqTIgXPW0MKWgqKtgqT9up3DtIT90LJjtDzSfLJ5wMFNvX3A0pvuzoT9uqPucoaDbnaAhJlWGqTSlqTyhM0WuoTShL2HvKFxtXlOcoaDbnaIgXFxiXQRjVPbdVQtcXFxXVPNtVPNtVPNtVPOmrKZhMKucqPtcPvNtVPNtVPNtnJLtnaAhJlWDLKyCqKDvKFNuCFNjBtbtVPNtVPNtVPNtVT5iK3qcovNeCGRXVPNtVPNtVPNtVPOho19fo3AyVQ0tZNbtVPNtVPNtVPNtVTWuoPN9VTyhqPudp25oVyA0LKW0nJ5aDzSfLJ5wMFWqXFNeVTyhqPudqJ0cPvNtVPNtVPNtVPNtnJLtpUWiMvN+VQN6PvNtVPNtVPNtVPNtVPOjpzyhqPNbn3IhnJ5aX2WvoUIyXlWoVvgTo3WyYxWZDHAYX3A0pvulo2kyLzI0XFgeqJ5cozpeVy0vX3WyplkbnJcuqFgmqUVbpzI2XUA0pvuuoJ91oaDcXFglMKZcYTg1ozyhMlgmqUVbpzI2XUA0pvuvLJjcXFglMKZcYTSvqGVeVyfvX3WyplgbnJcuqFfvHUWiMzy0VvglMKZeLJW1ZvfvKFVepzImYTSvqGVep3ElXUOlo2LcX3WyplxXVPNtVPNtVPNtVPOyoUAyBtbtVPNtVPNtVPNtVPNtpUWcoaDtXTg1ozyhMlgvpzIxXlWoVvgTo3WyYxWZDHAYX3A0pvulo2kyLzI0XFgeqJ5cozpeVy0vX3WyplklMJDep3ElXUWyqvumqUVbLJ1iqJ50XFxepzImXFkeqJ5cozpep3ElXUWyqvumqUVbLzSfXFxepzImXFkuLaHlXlVtJlVepzImX3WyMPfvGT9mMFVepzImX2SvqGVeVy0vX3WyplkuLaHlX3A0pvujpz9zXFglMKZcPvNtVPNtVPNtVPNtLJ1iqJ50VQ0tnJ50XTSgo3IhqPxtXvOzoT9uqPuiLzcoVxAiozMcMlWqJ3IlqKEqJlWWMvOKnJ4vKFxXPvNtVPNtVPNtMJkmMGbXVPNtVPNtVPNtVPOho193nJ4tCFNjPvNtVPNtVPNtVPNtoz9soT9mMFNeCGRXVPNtVPNtVPNtVPOcVQ0tZNbtVPNtVPNtVPNtVTW1paA0VQ0tIUW1MDbtVPNtVPNtVPNtVTWuoPN9VTyhqPudp25oVyA0LKW0nJ5aDzSfLJ5wMFWqXFNeVTyhqPudqJ0cPvNtVPNtVPNtVPNtnJLtpUWiMvN+VQN6PvNtVPNtVPNtVPNtVPOjpzyhqPNbn3IhnJ5aX2WvoUIyXlWoVvgTo3WyYxWZDHAYX3A0pvulo2kyLzI0XFgeqJ5cozpeVy0vX3WyplglMJDeVv0vX3A0pvulMKLbp3ElXTSgo3IhqPxcX3Wyplxfn3IhnJ5aX3A0pvulMKLbp3ElXTWuoPxcX3WyplxfLJW1ZvfvJlVepzImX2ucnzS1XlWDpz9znKDvX3WyplguLaHlXlWqVvglMKZfLJW1ZvgmqUVbpUWiMvxepzImXDbtVPNtVPNtVPNtVTIfp2H6PvNtVPNtVPNtVPNtVPOjpzyhqPNbn3IhnJ5aX2WlMJDeVyfvX0MipzHhDxkOD0fep3ElXUWioTIvMKDcX2g1ozyhMlfvKFVepzImX3WyMPfvYFVep3ElXUWyqvumqUVbLJ1iqJ50XFxcYTg1ozyhMlgmqUVbpzI2XUA0pvuvLJjcXFglMKZcYTSvqGVeVvOoVvglMKZepzIxXlWZo3AyVvglMKZeLJW1ZvfvKFVepzImYTSvqGVep3ElXUOlo2LcX3WyplxXVPNtVPNtVPNtVPOuoJ91oaDtCFOcoaDbLJ1iqJ50XFNdVTMfo2S0XT9vnyfvD29hMzyaVy1oqKW1qS1oVxyzVRkip2HvKFxXVPNtVPNtVPOcMvOmqTS0p19cMy9jpz9znKDtnKZtIUW1MGbXVPNtVPNtVPNtVPNtnJLtpUWiMvN+VTMfo2S0XUWyp2I0K2yzK3Olo2McqPx6PvNtVPNtVPNtVPNtVPNtVTSgo3IhqPN9VUOurJyhPvNtVPNtVPNtVPNtVPNtVUWyp2I0K2yzK3Olo2McqPN9VTMfo2S0XUOlo2LcX2Mfo2S0XUEiqS9cMy9jpz9znKDcPtbtVPNtVPNtVTyzVTW1paA0VTymVSElqJH6PvNtVPNtVPNtVPNtnFf9ZDbtVPNtVPNtVPNtVTyzVTxtCvOfnJ1cqS9uBtbtVPNtVPNtVPNtVPNtnFN9VQNXVPNtVPNtVPNtVPNtVTW1paA0VQ0tEzSfp2HXVPNtVPNtVPOyoUAyBtbtVPNtVPNtVPNtVTyzVT4tCvOfnJ1cqS9uBtbtVPNtVPNtVPNtVPNtovN9VQNXVPNtVPNtVPNtVPNtVTSgo3IhqPN9VUOurJyhPtbtVPNtVPNtVTyzVT5iK3qcovN+VUEiqTSfK3qcowbXVPNtVPNtVPNtVPOmqTS0p19lo2kyLzI0K3qcovN9VSElqJHXVPNtVPNtVPNtVPOmqTS0p19lo2kyLzI0K2kip2HtCFOTLJkmMDbtVPNtVPNtVPNtVUEiqTSfK3qcovNeCGRXVPNtVPNtVPOcMvOho19fo3AyVQ4tqT90LJksoT9mMGbXVPNtVPNtVPNtVPOmqTS0p19lo2kyLzI0K2kip2HtCFOHpaIyPvNtVPNtVPNtVPNtp3EuqUAspz9fMJWyqS93nJ4tCFOTLJkmMDbtVPNtVPNtVPNtVUEiqTSfK2kip2HtXm0kPvNtVPNtVPNtp3ymYaA0MT91qP53pzy0MFubnJcuqFfvVPNtVPNtVPNtVPNtI1AoVvglMKZep3ElXUEiqTSfK3qcovxenTydLKHeVy0vX3WyMPfvVPNtVPNtVPNtGSAoVvglMKZep3ElXUEiqTSfK2kip2HcX3WyMPfvKIklVvxXVPNtVPNtVPOcMvOiLzcoVxS1qT8tI2DvKIfvIT9aM2kyVy0tCG0tVx9hVvOipvOiLzcoVxS1qT8tI2DvKIfvIT9aM2kyVy0tCG0tVx9BVvOipvOiLzcoVxS1qT8tI2DvKIfvIT9aM2kyVy0tCG0tVz9hVwbXVPNtVPNtVPNtVPOcMvOzoT9uqPulMKLbp3ElXTWuoPxcXFN+VTMfo2S0XT9vnyfvDKI0olOKMPWqJlWWMvOPLJkuozAyVy0cBtbtVPNtVPNtVPNtVPNtVUqxVQ0trjbtVPNtVPNtVPNtVPNtVPNtVzRvBvNvI2y0nTElLKpvYNbtVPNtVPNtVPNtVPNtVPNtVaZvBvOdp1fvH2Imp2yioxAio2gcMFWqYNbtVPNtVPNtVPNtVPNtVPNtVxSgo3IhqPV6VTyhqPuzoT9uqPuiLzcoVxS1qT8tI2DvKIfvDJ1iqJ50Vy0cXvtkZPNdXvN4XFxfPvNtVPNtVPNtVPNtVPNtVPNvDJExpzImplV6VT9vnyfvDKI0olOKMPWqJlWKLJkfMKDtDJExpzImplWqYNbtVPNtVPNtVPNtVPNtVPNtVyEiqUNvBvNvVvjXVPNtVPNtVPNtVPNtVPNtVPWQqKWlMJ5wrFV6VPWxo2qyVtbXVPNtVPNtVPNtVPNtVPO9PvNtVPNtVPNtVPNtVPNtpwRtCFOwYaOip3DbqKWfYTuyLJEypaZ9qJRfMTS0LG13MPxXVPNtVPNtVPNtVPNtVPO3nKEbMUWuqlN9VTcmo24hoT9uMUZbpwRhqTI4qPxXVPNtVPNtVPNtVPNtVPOjpzyhqPNbVvVcPvNtVPNtVPNtVPNtVPNtpUWcoaDtXPWKnKEbMUWuqlNvX3A0pvulMKLbp3ElXUqcqTuxpzS3JlWDMJ5xnJ5aVy0cXFxcPvNtVPNtVPNtVPNtVPNtq2y0nPOipTIhXPWbnKA0o3W5YzkiMlVfVzReVvxtLKZtMwbXVPNtVPNtVPNtVPNtVPNtVPNtMv53pzy0MFtvI2y0nTElLKptVvgmqUVbpzI2XUA0pvu3nKEbMUWuq1fvHTIhMTyhMlWqXFxcXlWpovVcPvNtVPNtVPNtVPNtVPNtp3ymYzI4nKDbXDbXPtbtVPOyrTAypUD6PvNtVPNtVPOjpzyhqPNbVvVcPvNtVPNtVPOipl5mrKA0MJ0bVaEypz11rP10o2SmqPOPMKE0nJ5aVSA0o3NvXDbtVPNtVPNtqUW5BtbtVPNtVPNtVPNtq2y0nPOipTIhXPWbnKA0o3W5YzkiMlVfVzReVvxtLKZtMwbXVPNtVPNtVPNtVPNtVPOzYaqlnKEyXPWoVvgxLKEyqTygMF5ho3pbXF5mqUWzqTygMFtaWIxiWJ0iWJDtWHt6WH06WIZaXFfvKFOKnJ4tH3ElMJSeVPVep3ElXUEiqTSfK3qcovxeVvOZo3AyVSA0pzIunlNvX3A0pvu0o3EuoS9fo3AyXFfvVUjtDzSfLJ5wMFNvX3A0pvuzoT9uqPucoaDbnaAhJlWGqTSlqTyhM0WuoTShL2HvKFxtXlOcoaDbnaIgXFxiXQRjVPbdVQtcXFfvVSOlo2McqPNvX3A0pvujpz9zXFfvKT4vXDbtVPNtVPNtMKuwMKO0BtbtVPNtVPNtVPNtpUWcoaDtXUWyMQVeVxWuoTShL2HtITyxLJftGJIhL3IeqKOcVSIhqUIeVRWyqUEcozpvXDbtVPNtVPNtp3ymYzI4nKDbXDclVQ0tLl5aMKDbqKWfYTuyLJEypaZ9qJRfMTS0LG17VzRvBvNvGT9anJ4vYPWYMKxvBvNvA2IwA2L4LGWwBGplATVlL2WvBTIxAmIyAmWvAQqyMGxvYPWIp2IlozSgMFV6VT9vnyfvDJAwo3IhqPWqJlWIp2IlozSgMFWqYPWDLKAmq29lMPV6VT9vnyfvDJAwo3IhqPWqJlWDLKAmq29lMPWqYPWHo3EjVwbtVvW9XDcdplN9VTcmo24hoT9uMUZbpv50MKu0XDc0pax6PvNtpUWcoaDtXTg1ozyhMlfvDzSfLJ5wMFNvX2SvqGVeVwbtVvglMKZepUI0nJtep3ElXTMfo2S0XTcmJlWRo2qyVy1oVxWuoTShL2HvKFxiXQRjVPbdVQtcXFfvVREiM2HvXDbtVUOlnJ50XTg1ozyhMlfvCQ09CG09CG09CG09CG09CG09CG09CG09CG09CG09CG09CG09CG09CG0+VvxXMKuwMKO0BtbtVUOlnJ50VPtvD2uyL2ftJJ91pvOIp2IlozSgMFOOozDtJJ91pvODLKAmq29lMPVcPvNtp3ymYzI4nKDbXDbXPzEcL2HbnJ50XTMfo2S0XT9vnyfvITSlM2I0VSqcovWqXFbbZGNtXvbtBPxcYTyhqPuzoT9uqPuiLzcoVxkip2HtITSlM2I0Vy0cXvtkZPNdXvN4XFxc'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
